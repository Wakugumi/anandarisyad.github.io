---
export interface ModalAction {
  label: string;
  action?: 'close' | 'submit' | 'custom';
  onClick?: string;
  href?: string;
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
}

export interface Props {
  id: string;
  title: string;
  content?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
  position?: 'center' | 'top' | 'bottom';
  backdrop?: 'blur' | 'dark' | 'light';
  closeOnBackdrop?: boolean;
  closeOnEscape?: boolean;
  showCloseButton?: boolean;
  animation?: 'fade' | 'slide' | 'zoom' | 'none';
  zIndex?: number;
  actions?: ModalAction[];
  className?: string;
  headerClassName?: string;
  bodyClassName?: string;
  footerClassName?: string;
}

const {
  id,
  title,
  content,
  size = 'md',
  position = 'center',
  backdrop = 'dark',
  closeOnBackdrop = true,
  closeOnEscape = true,
  showCloseButton = true,
  animation = 'fade',
  zIndex = 50,
  actions = [],
  className = '',
  headerClassName = '',
  bodyClassName = '',
  footerClassName = ''
} = Astro.props;

const sizeClasses = {
  xs: 'max-w-xs',
  sm: 'max-w-sm',
  md: 'max-w-md',
  lg: 'max-w-lg',
  xl: 'max-w-xl',
  full: 'max-w-full mx-4'
};

const positionClasses = {
  center: 'items-center justify-center',
  top: 'items-start justify-center pt-16',
  bottom: 'items-end justify-center pb-16'
};

const backdropClasses = {
  blur: 'bg-black/50 backdrop-blur-sm',
  dark: 'bg-black/50',
  light: 'bg-white/80'
};

const animationClasses = {
  fade: 'transition-opacity duration-300',
  slide: 'transition-all duration-300 ease-out',
  zoom: 'transition-all duration-300 ease-out',
  none: ''
};

const getActionButtonClass = (variant: string = 'secondary') => {
  const baseClass = 'px-4 py-2 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  switch (variant) {
    case 'primary':
      return `${baseClass} bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500`;
    case 'danger':
      return `${baseClass} bg-red-600 text-white hover:bg-red-700 focus:ring-red-500`;
    case 'ghost':
      return `${baseClass} text-gray-700 hover:bg-gray-100 focus:ring-gray-500`;
    default:
      return `${baseClass} bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500`;
  }
};

const modalId = `modal-${id}`;
const titleId = `${modalId}-title`;
const contentId = `${modalId}-content`;
---

<div
  x-data={`{
    open: false,
    init() {
      // Listen for modal open/close events
      this.$watch('open', value => {
        if (value) {
          document.body.style.overflow = 'hidden';
          this.$nextTick(() => this.$refs.modal?.focus());
        } else {
          document.body.style.overflow = '';
        }
      });
      
      // Global event listeners for opening this modal
      window.addEventListener('open-modal-${id}', () => this.open = true);
      window.addEventListener('close-modal-${id}', () => this.open = false);
      window.addEventListener('toggle-modal-${id}', () => this.open = !this.open);
    },
    closeModal() {
      this.open = false;
      this.$dispatch('modal-closed', { modalId: '${id}' });
    },
    handleBackdropClick() {
      if (${closeOnBackdrop}) {
        this.closeModal();
      }
    },
    handleEscapeKey() {
      if (${closeOnEscape}) {
        this.closeModal();
      }
    }
  }`}
  x-show="open"
  x-transition:enter={animation !== 'none' ? 'transition ease-out duration-300' : ''}
  x-transition:enter-start={animation === 'fade' ? 'opacity-0' : animation === 'zoom' ? 'opacity-0 scale-95' : animation === 'slide' ? 'opacity-0 translate-y-4' : ''}
  x-transition:enter-end="opacity-100 scale-100 translate-y-0"
  x-transition:leave={animation !== 'none' ? 'transition ease-in duration-200' : ''}
  x-transition:leave-start="opacity-100 scale-100 translate-y-0"
  x-transition:leave-end={animation === 'fade' ? 'opacity-0' : animation === 'zoom' ? 'opacity-0 scale-95' : animation === 'slide' ? 'opacity-0 translate-y-4' : ''}
  @keydown.escape="handleEscapeKey()"
  class={`fixed inset-0 z-${zIndex} flex ${positionClasses[position]} ${backdropClasses[backdrop]} p-4 ${animationClasses[animation]}`}
  role="dialog"
  aria-modal="true"
  aria-labelledby={titleId}
  aria-describedby={content ? contentId : undefined}
  style="display: none;"
  x-cloak
>
  <div
    x-ref="modal"
    @click.stop
    tabindex="-1"
    class={`w-full ${sizeClasses[size]} rounded-lg bg-white shadow-xl ${className}`}
    x-transition:enter="transition ease-out duration-300 delay-100"
    x-transition:enter-start={animation === 'zoom' ? 'scale-95' : animation === 'slide' ? 'translate-y-4' : ''}
    x-transition:enter-end="scale-100 translate-y-0"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="scale-100 translate-y-0"
    x-transition:leave-end={animation === 'zoom' ? 'scale-95' : animation === 'slide' ? 'translate-y-4' : ''}
  >
    <!-- Header -->
    <div class={`flex items-center justify-between p-6 border-b border-gray-200 ${headerClassName}`}>
      <h2 id={titleId} class="text-xl font-semibold text-gray-900">
        {title}
      </h2>
      
      {showCloseButton && (
        <button
          type="button"
          @click="closeModal()"
          class="rounded-full p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          aria-label="Close modal"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="size-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      )}
    </div>

    <!-- Body -->
    <div class={`p-6 ${bodyClassName}`}>
      {content && (
        <div id={contentId} class="text-gray-700">
          {content}
        </div>
      )}
      
      <!-- Slot for custom content -->
      <slot />
    </div>

    <!-- Footer with Actions -->
    {actions.length > 0 && (
      <div class={`flex justify-end gap-3 p-6 border-t border-gray-200 bg-gray-50 rounded-b-lg ${footerClassName}`}>
        {actions.map((action) => 
          action.href ? (
            <a
              href={action.href}
              class={getActionButtonClass(action.variant)}
              target={action.href.startsWith('http') ? '_blank' : '_self'}
            >
              {action.label}
            </a>
          ) : (
            <button
              type={action.type || 'button'}
              class={getActionButtonClass(action.variant)}
              disabled={action.disabled}
              onclick={
                action.action === 'close' ? "this.closest('[x-data]').__x.$data.closeModal()" :
                action.action === 'submit' ? "this.closest('form')?.submit()" :
                action.onClick || ''
              }
            >
              {action.label}
            </button>
          )
        )}
      </div>
    )}
  </div>
  
  <!-- Backdrop click handler -->
  <div 
    class="absolute inset-0 -z-10" 
    @click="handleBackdropClick()"
    aria-hidden="true"
  ></div>
</div>

<script>
  // Helper functions for opening modals from JavaScript
  window.openModal = function(modalId) {
    window.dispatchEvent(new CustomEvent(`open-modal-${modalId}`));
  };
  
  window.closeModal = function(modalId) {
    window.dispatchEvent(new CustomEvent(`close-modal-${modalId}`));
  };
  
  window.toggleModal = function(modalId) {
    window.dispatchEvent(new CustomEvent(`toggle-modal-${modalId}`));
  };
</script>
